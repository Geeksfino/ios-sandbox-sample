// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SandboxSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SandboxSDK.SandboxCore {
  public static func evaluateFeatureAsync(_ name: Swift.String, args: [Swift.String : Any] = [:], context: [Swift.String : Any]? = nil) async throws -> SandboxSDK.PolicyDecision
  public static func recordUsageAsync(_ name: Swift.String) async throws -> SandboxSDK.OkResponse
  public static func getAuditLogAsync() async throws -> [[Swift.String : Any]]
  public static func exportFeatureOverviewsAsync() async throws -> [SandboxSDK.FeatureOverview]
}
public func evaluateFeatureAsync(_ name: Swift.String, args: [Swift.String : Any] = [:], context: [Swift.String : Any]? = nil) async throws -> SandboxSDK.PolicyDecision
public func recordUsageAsync(_ name: Swift.String) async throws -> SandboxSDK.OkResponse
public enum SandboxError : Swift.Error, Swift.CustomStringConvertible {
  case runtime(Swift.String)
  public var description: Swift.String {
    get
  }
}
public struct SandboxCore {
}
extension SandboxSDK.SandboxCore {
  @discardableResult
  public static func initialize() -> Swift.Bool
  public static func evaluateFeature(_ name: Swift.String, args: [Swift.String : Any] = [:], context: [Swift.String : Any]? = nil) throws -> SandboxSDK.PolicyDecision
  @discardableResult
  public static func recordUsage(_ name: Swift.String) throws -> SandboxSDK.OkResponse
  public static func getAuditLog() throws -> [[Swift.String : Any]]
  public static func clearAuditLog()
  @discardableResult
  public static func updateResourceLimits(_ limits: [Swift.String : Any]) throws -> SandboxSDK.OkResponse
}
public struct OkResponse : Swift.Decodable {
  public let ok: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public enum DecisionStatus : Swift.String, Swift.Decodable {
  case allowed
  case ask
  case denied
  case rateLimited
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DecisionErrorType : Swift.String, Swift.Decodable {
  case UnknownFeature
  case MissingCapability
  case UserNotPresent
  case ConsentRequired
  case NoGrant
  case RateLimited
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PolicyDecision : Swift.Decodable {
  public let status: SandboxSDK.DecisionStatus
  public let reason: Swift.String?
  public let reset_at: Swift.Int64?
  public let error: SandboxSDK.DecisionErrorType?
  public init(from decoder: any Swift.Decoder) throws
}
@discardableResult
public func initialize() -> Swift.Bool
public func evaluateFeature(_ name: Swift.String, args: [Swift.String : Any] = [:], context: [Swift.String : Any]? = nil) throws -> SandboxSDK.PolicyDecision
@discardableResult
public func recordUsage(_ name: Swift.String) throws -> SandboxSDK.OkResponse
public func getAuditLog() throws -> [[Swift.String : Any]]
public func clearAuditLog()
@discardableResult
public func updateResourceLimits(_ limits: [Swift.String : Any]) throws -> SandboxSDK.OkResponse
public struct FeatureOverview : Swift.Decodable, Swift.Equatable {
  public struct Parameters : Swift.Decodable, Swift.Equatable {
    public let required: [Swift.String]?
    public static func == (a: SandboxSDK.FeatureOverview.Parameters, b: SandboxSDK.FeatureOverview.Parameters) -> Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
  }
  public let id: Swift.String
  public let name: Swift.String
  public let description: Swift.String?
  public let parameters: SandboxSDK.FeatureOverview.Parameters?
  public static func == (a: SandboxSDK.FeatureOverview, b: SandboxSDK.FeatureOverview) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
extension SandboxSDK.SandboxCore {
  public static func exportFeatureOverviews() throws -> [SandboxSDK.FeatureOverview]
}
public struct Feature {
  public let id: Swift.String
  public let name: Swift.String
  public let description: Swift.String?
  public let category: SandboxSDK.FeatureCategory
  public let path: Swift.String
  public let requiredCapabilities: [SandboxSDK.CapabilityType]
  public let primitives: [SandboxSDK.Primitive]
  public init(name: Swift.String, description: Swift.String? = nil, category: SandboxSDK.FeatureCategory, path: Swift.String, requiredCapabilities: [SandboxSDK.CapabilityType], primitives: [SandboxSDK.Primitive])
  public init(id: Swift.String, name: Swift.String, description: Swift.String? = nil, category: SandboxSDK.FeatureCategory, path: Swift.String, requiredCapabilities: [SandboxSDK.CapabilityType], primitives: [SandboxSDK.Primitive])
}
extension SandboxSDK.SandboxCore {
  @discardableResult
  public static func registerFeature(_ feature: SandboxSDK.Feature) -> Swift.Bool
  @discardableResult
  public static func applyManifest(features: [SandboxSDK.Feature], policies: [Swift.String : SandboxSDK.Policy] = [:]) -> Swift.Bool
  @discardableResult
  public static func unregisterFeature(_ featureId: Swift.String) -> Swift.Bool
  public static func listFeatureIds() -> [Swift.String]
}
@discardableResult
public func registerFeature(_ feature: SandboxSDK.Feature) -> Swift.Bool
@discardableResult
public func applyManifest(features: [SandboxSDK.Feature], policies: [Swift.String : SandboxSDK.Policy] = [:]) -> Swift.Bool
public struct GrantSpec : Swift.Codable {
  public let featureNames: [Swift.String]
  public init(featureNames: [Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SandboxSDK.SandboxCore {
  public static func createGrant(featureNames: [Swift.String]) -> Foundation.UUID?
  public static func listGrantIds() -> [Foundation.UUID]
  public static func revokeGrant(_ id: Foundation.UUID) -> Swift.Bool
  public static func context(with grants: [SandboxSDK.GrantSpec], base: [Swift.String : Any]? = nil) -> [Swift.String : Any]
}
extension SandboxSDK.SandboxCore {
  public static func getPerformanceSummary() throws -> SandboxSDK.PerformanceSummary
  public static func getPerformanceHistory() throws -> [SandboxSDK.ExecutionRecord]
  public static func getResourceUsage() throws -> SandboxSDK.ResourceUsage
  public static func getResourceLimits() throws -> SandboxSDK.ResourceLimits
}
extension SandboxSDK.SandboxCore {
  @discardableResult
  public static func revokeCapability(_ capabilityId: Swift.String) throws -> SandboxSDK.OkResponse
  @discardableResult
  public static func updateCapability(_ capabilityId: Swift.String, scope: SandboxSDK.CapabilityScope) throws -> SandboxSDK.OkResponse
}
public struct PerformanceSummary : Swift.Decodable {
  public let totalExecutions: Swift.UInt64
  public let averageDuration: Foundation.TimeInterval
  public let successRate: Swift.Double
  public let errorCount: Swift.UInt64
  public let mostUsedPrimitives: [SandboxSDK.PrimitiveUsage]
  public let recentAlerts: [SandboxSDK.PerformanceAlert]
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExecutionRecord : Swift.Decodable {
  public let featureName: Swift.String
  public let duration: Foundation.TimeInterval
  public let success: Swift.Bool
  public let error: Swift.String?
  public let memoryUsedMb: Swift.UInt64
  public let cpuPercent: Swift.UInt64
  public let networkCalls: Swift.UInt64
  public let primitivesUsed: [Swift.String]
  public init(from decoder: any Swift.Decoder) throws
}
public struct PerformanceAlert : Swift.Decodable {
  public let alertType: SandboxSDK.AlertType
  public let message: Swift.String
  public let thresholdValue: Swift.Double
  public let actualValue: Swift.Double
  public init(from decoder: any Swift.Decoder) throws
}
public struct PrimitiveUsage : Swift.Decodable {
  public let name: Swift.String
  public let count: Swift.UInt64
  public init(from decoder: any Swift.Decoder) throws
}
public enum AlertType : Swift.String, Swift.Decodable {
  case highLatency
  case highMemoryUsage
  case highCpuUsage
  case highErrorRate
  case resourceExhaustion
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ResourceUsage : Swift.Decodable {
  public let memoryUsedMb: Swift.UInt64
  public let cpuPercent: Swift.UInt64
  public let networkCalls: Swift.UInt64
  public let fileSize: Swift.UInt64
  public let executionTime: Foundation.TimeInterval
  public let concurrentOperations: Swift.UInt64
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResourceLimits : Swift.Decodable {
  public let maxMemoryMb: Swift.UInt64
  public let maxCpuPercent: Swift.UInt64
  public let maxNetworkCalls: Swift.UInt64
  public let maxFileSize: Swift.UInt64
  public let maxExecutionTime: Foundation.TimeInterval
  public let maxConcurrentOperations: Swift.UInt64
  public init(from decoder: any Swift.Decoder) throws
}
public enum CapabilityScope : Swift.String, Swift.CaseIterable {
  case full
  case restricted
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SandboxSDK.CapabilityScope]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [SandboxSDK.CapabilityScope] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public func getPerformanceSummary() throws -> SandboxSDK.PerformanceSummary
public func getPerformanceHistory() throws -> [SandboxSDK.ExecutionRecord]
public func getResourceUsage() throws -> SandboxSDK.ResourceUsage
public func getResourceLimits() throws -> SandboxSDK.ResourceLimits
@discardableResult
public func revokeCapability(_ capabilityId: Swift.String) throws -> SandboxSDK.OkResponse
@discardableResult
public func updateCapability(_ capabilityId: Swift.String, scope: SandboxSDK.CapabilityScope) throws -> SandboxSDK.OkResponse
public enum Sensitivity : Swift.String, Swift.Codable {
  case low, medium, high
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RateUnit : Swift.String, Swift.Codable {
  case minute, day
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RateLimit : Swift.Codable {
  public let unit: SandboxSDK.RateUnit
  public let max: Swift.Int
  public init(unit: SandboxSDK.RateUnit, max: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Policy : Swift.Codable {
  public var requiresUserPresent: Swift.Bool?
  public var requiresExplicitConsent: Swift.Bool?
  public var sensitivity: SandboxSDK.Sensitivity?
  public var rateLimit: SandboxSDK.RateLimit?
  public init(requiresUserPresent: Swift.Bool? = nil, requiresExplicitConsent: Swift.Bool? = nil, sensitivity: SandboxSDK.Sensitivity? = nil, rateLimit: SandboxSDK.RateLimit? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PartialPolicy : Swift.Codable {
  public var requiresUserPresent: Swift.Bool?
  public var requiresExplicitConsent: Swift.Bool?
  public var sensitivity: SandboxSDK.Sensitivity?
  public var rateLimit: SandboxSDK.RateLimit?
  public init(requiresUserPresent: Swift.Bool? = nil, requiresExplicitConsent: Swift.Bool? = nil, sensitivity: SandboxSDK.Sensitivity? = nil, rateLimit: SandboxSDK.RateLimit? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SandboxSDK.SandboxCore {
  @discardableResult
  public static func setPolicy(_ featureId: Swift.String, _ policy: SandboxSDK.Policy) -> Swift.Bool
  @discardableResult
  public static func setPolicies(_ policies: [Swift.String : SandboxSDK.Policy]) -> Swift.Bool
  @discardableResult
  public static func setPolicies(_ entries: [(SandboxSDK.Feature, SandboxSDK.Policy)]) -> Swift.Bool
  public static func getPolicy(_ featureId: Swift.String) -> SandboxSDK.Policy?
  public static func listPolicies() -> [Swift.String : SandboxSDK.Policy]
  @discardableResult
  public static func updatePolicy(_ featureId: Swift.String, partial: SandboxSDK.PartialPolicy) -> Swift.Bool
}
@discardableResult
public func setPolicy(_ featureId: Swift.String, _ policy: SandboxSDK.Policy) -> Swift.Bool
@discardableResult
public func setPolicies(_ policies: [Swift.String : SandboxSDK.Policy]) -> Swift.Bool
public enum FeatureCategory : Swift.String, Swift.Codable {
  case Native
  case MiniApp
  case IoTDevice
  case External
  case SystemApp
  case Web
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CapabilityType : Swift.String, Swift.Codable {
  case UIAccess
  case Network
  case DeviceControl
  case Camera
  case Microphone
  case AudioOutput
  case Bluetooth
  case NFC
  case Sensors
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FileOpType : Swift.String, Swift.Codable {
  case Read, Write, Delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HttpMethod : Swift.String, Swift.Codable {
  case GET, POST, PUT, DELETE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PowerState : Swift.String, Swift.Codable {
  case On, Off
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ClipboardAction : Swift.String, Swift.Codable {
  case Copy, Paste, Clear
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SensorType : Swift.Codable, Swift.Equatable {
  case Temperature
  case Humidity
  case Motion
  case Light
  case AirQuality
  case Custom(Swift.String)
  public static func == (a: SandboxSDK.SensorType, b: SandboxSDK.SensorType) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DeviceType : Swift.Codable, Swift.Equatable {
  case Light
  case Thermostat
  case DoorLock
  case Custom(Swift.String)
  public static func == (a: SandboxSDK.DeviceType, b: SandboxSDK.DeviceType) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CameraParams : Swift.Codable {
  public var quality: Swift.String?
  public var resolution: Swift.String?
  public var facing: Swift.String?
  public init(quality: Swift.String? = nil, resolution: Swift.String? = nil, facing: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoParams : Swift.Codable {
  public var duration: Swift.UInt32?
  public var quality: Swift.String?
  public var resolution: Swift.String?
  public init(duration: Swift.UInt32? = nil, quality: Swift.String? = nil, resolution: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AudioParams : Swift.Codable {
  public var duration: Swift.UInt32?
  public var quality: Swift.String?
  public var format: Swift.String?
  public init(duration: Swift.UInt32? = nil, quality: Swift.String? = nil, format: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CalendarEvent : Swift.Codable {
  public var title: Swift.String
  public var startTime: Swift.String
  public var endTime: Swift.String
  public var description: Swift.String?
  public init(title: Swift.String, startTime: Swift.String, endTime: Swift.String, description: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Primitive {
  case MobileUI(page: Swift.String, component: Swift.String?)
  case ShowDialog(title: Swift.String, message: Swift.String)
  case MiniApp(urlPath: Swift.String, jsAPI: [Swift.String])
  case InvokeJSAPI(apiName: Swift.String, params: [Swift.String : Any])
  case CapturePhoto(params: SandboxSDK.CameraParams)
  case CaptureVideo(params: SandboxSDK.VideoParams)
  case RecordAudio(params: SandboxSDK.AudioParams)
  case PickImage
  case PickVideo
  case FileOp(path: Swift.String, op: SandboxSDK.FileOpType)
  case NetworkOp(url: Swift.String, method: Swift.String)
  case NetworkOpFull(url: Swift.String, method: SandboxSDK.HttpMethod, headers: [Swift.String : Swift.String]?, body: Any?)
  case WebSocketConnect(url: Swift.String)
  case OpenUrl(url: Swift.String, appHint: Swift.String?)
  case ClipboardOp(action: SandboxSDK.ClipboardAction, text: Swift.String?)
  case ShowNotification(title: Swift.String, body: Swift.String)
  case CreateCalendarEvent(event: SandboxSDK.CalendarEvent)
  case ComposeEmail(to: Swift.String?, subject: Swift.String?)
  case GetCurrentLocation
  case PlayAudio(source: Swift.String, volume: Swift.Int?)
  case StopAudio
  case BluetoothScan
  case BluetoothScanWithFilters(filters: [Swift.String : Any]?)
  case BluetoothConnect(deviceId: Swift.String)
  case BluetoothWrite(deviceId: Swift.String, payload: Foundation.Data)
  case BluetoothRead(deviceId: Swift.String, characteristic: Swift.String)
  case NfcReadTag
  case NfcWriteTag(payload: Foundation.Data)
  case DeviceControl(deviceType: SandboxSDK.DeviceType, action: Swift.String, deviceId: Swift.String?)
  case DevicePower(deviceId: Swift.String, state: SandboxSDK.PowerState)
  case SetDeviceMode(deviceId: Swift.String, mode: Swift.String)
  case SetTemperature(deviceId: Swift.String, value: Swift.Float)
  case SetBrightness(deviceId: Swift.String, value: Swift.Int)
  case LockDevice(deviceId: Swift.String)
  case UnlockDevice(deviceId: Swift.String)
  case ReadSensor(sensorType: SandboxSDK.SensorType, deviceId: Swift.String)
  case ExecuteScene(sceneId: Swift.String)
  case SyncDeviceGroup(groupId: Swift.String)
  case ValidateUser(token: Swift.String)
  case CheckCapability(permission: Swift.String)
  case GetContext(key: Swift.String)
  case LogAudit(action: Swift.String, result: Swift.String)
  public func toDictionary() -> [Swift.String : Any]
}
extension SandboxSDK.DecisionStatus : Swift.Equatable {}
extension SandboxSDK.DecisionStatus : Swift.Hashable {}
extension SandboxSDK.DecisionStatus : Swift.RawRepresentable {}
extension SandboxSDK.DecisionErrorType : Swift.Equatable {}
extension SandboxSDK.DecisionErrorType : Swift.Hashable {}
extension SandboxSDK.DecisionErrorType : Swift.RawRepresentable {}
extension SandboxSDK.AlertType : Swift.Equatable {}
extension SandboxSDK.AlertType : Swift.Hashable {}
extension SandboxSDK.AlertType : Swift.RawRepresentable {}
extension SandboxSDK.CapabilityScope : Swift.Equatable {}
extension SandboxSDK.CapabilityScope : Swift.Hashable {}
extension SandboxSDK.CapabilityScope : Swift.RawRepresentable {}
extension SandboxSDK.Sensitivity : Swift.Equatable {}
extension SandboxSDK.Sensitivity : Swift.Hashable {}
extension SandboxSDK.Sensitivity : Swift.RawRepresentable {}
extension SandboxSDK.RateUnit : Swift.Equatable {}
extension SandboxSDK.RateUnit : Swift.Hashable {}
extension SandboxSDK.RateUnit : Swift.RawRepresentable {}
extension SandboxSDK.FeatureCategory : Swift.Equatable {}
extension SandboxSDK.FeatureCategory : Swift.Hashable {}
extension SandboxSDK.FeatureCategory : Swift.RawRepresentable {}
extension SandboxSDK.CapabilityType : Swift.Equatable {}
extension SandboxSDK.CapabilityType : Swift.Hashable {}
extension SandboxSDK.CapabilityType : Swift.RawRepresentable {}
extension SandboxSDK.FileOpType : Swift.Equatable {}
extension SandboxSDK.FileOpType : Swift.Hashable {}
extension SandboxSDK.FileOpType : Swift.RawRepresentable {}
extension SandboxSDK.HttpMethod : Swift.Equatable {}
extension SandboxSDK.HttpMethod : Swift.Hashable {}
extension SandboxSDK.HttpMethod : Swift.RawRepresentable {}
extension SandboxSDK.PowerState : Swift.Equatable {}
extension SandboxSDK.PowerState : Swift.Hashable {}
extension SandboxSDK.PowerState : Swift.RawRepresentable {}
extension SandboxSDK.ClipboardAction : Swift.Equatable {}
extension SandboxSDK.ClipboardAction : Swift.Hashable {}
extension SandboxSDK.ClipboardAction : Swift.RawRepresentable {}
